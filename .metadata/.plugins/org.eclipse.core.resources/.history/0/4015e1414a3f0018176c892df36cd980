package com.dmk.controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.dmk.models.Produto;
import com.dmk.response.Response;
import com.dmk.services.ProdutoSevice;

@RestController
@RequestMapping("/dmk/produto")
@CrossOrigin(origins = "*")
public class ProdutoController {

	private static final Logger log = LoggerFactory.getLogger(ProdutoController.class);

	@Autowired
	private ProdutoSevice produtoService;

	@GetMapping(value = "/produto/{id}")
	public ResponseEntity<Response<Produto>> buscarProduto(@PathVariable("id") Long id) {
		log.info("Buscando produto por ID: {}", id);
		Response<Produto> response = new Response<Produto>();
		Optional<Produto> produto = produtoService.buscaProduto(id);

		if (produto.isPresent()) {
			log.info("Produto não encontrado para o ID: {}", id);
			response.getErrors().add("Produto não encontrado para o ID " + id);
			return ResponseEntity.badRequest().body(response);
		}

		response.setData(produto.get());
		return ResponseEntity.ok(response);
	}

	@GetMapping(value = "/produtos")
	public ResponseEntity<Response<Map>> buscarProdutos() {
		log.info("Buscando produto");
		Response<Map> response = new Response<>();
		List<Produto> produto = produtoService.buscaProdutos();
		Map<String, Object> data = new HashMap<>();
		data.put("data", produto);
		response.setData(data);

		if (produto.isEmpty()) {
			log.info("Produtos não encontrados");
			return ResponseEntity.badRequest().body(response);
		}
		return ResponseEntity.ok(response);
	}

	/**
	 * método de parse para json
	 */
	public JSONObject toJson(List<Produto> produtos) {

		JSONObject json = new JSONObject();

		try {
			json.put("Data", produtos);
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return json;

	}

}
